{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap dccbcc339a8d6fc2d9f9","webpack:///./src/index.js"],"names":["GPX","gpxContent","xmlDoc","DOMParser","parseFromString","trkpts","querySelectorAll","trackpoints","createJsonFromGpxDom","length","Error","trkpt","point","lon","parseFloat","getAttribute","lat","elevation","querySelector","textContent","getAverageElevation","time","push","devideBy","start","Date","end","timeDiff","Math","abs","getTime","total","millisecondsToTime","totalMS","duration","seconds","parseInt","minutes","hours","days","hoursDays","distance","getUTCMinutes","getUTCSeconds","eleForMinMax","richElevation","gain","loss","startTime","dist","i","diff","calcDistanceBetweenPoints","max","apply","min","distanceInKm","wp1","wp2","point1","PI","alt","point2","dp","asin","sqrt","pow","sin","cos","d","h"],"mappings":"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","file":"gpx.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"gpx\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"gpx\"] = factory();\n\telse\n\t\troot[\"gpx\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap dccbcc339a8d6fc2d9f9\n **/","/**\n * GPX parser class\n * @class GPX\n */\nexport default class GPX{\n\n  /**\n   * GPX constructor.\n   * @param {string} gpxContent String of gpx XML data.\n   * @constructs GPX\n   */\n  constructor( gpxContent ){\n    /**\n     * string of gpx XML data.\n     * @member GPX#gpxContent\n     */\n    this.gpxContent = gpxContent;\n\n    /**\n     * The parsed gpx string into a DOM object.\n     * @member GPX#xmlDoc\n     */\n    this.xmlDoc = new DOMParser().parseFromString( this.gpxContent, 'application/xml' );\n\n    /**\n     * Object of all trackpoints in the gpx DOM.\n     * @member GPX#trkpts\n     */\n    this.trkpts = this.xmlDoc.querySelectorAll( 'trkpt' );\n\n    /**\n     * All trackpoints as an Array\n     * @member GPX#trackpoints\n     */\n    this.trackpoints = this.createJsonFromGpxDom();\n\n    if( this.trackpoints.length === 0 ){\n      throw new Error( 'This file has no trackpoints (trkpt)' );\n    }\n  }\n\n  /**\n   * @typedef TrackPoint\n   * @type Object\n   * @property {number} lon The lon coordinate of the trackpoint\n   * @property {number} lat The lat coordinate of the trackpoint\n   * @property {number} elevation The elevation in meters of the trackpoint\n   * @property {string} time The time of the trackpoint\n   */\n\n  /**\n   * Loops over gpx DOM and returns array of objects\n   * @return {TrackPoint} The trackpoint data\n   */\n  createJsonFromGpxDom(){\n    let trackpoints = [];\n\n    for( let trkpt = 0; trkpt < this.trkpts.length; trkpt++ ){\n      let point = this.trkpts[ trkpt ],\n          lon = parseFloat( point.getAttribute( 'lon' ) ),\n          lat = parseFloat( point.getAttribute( 'lat' ) ),\n          elevation = ( point.querySelector( 'ele' ) ) ? point.querySelector( 'ele' ).textContent : this.getAverageElevation(),\n          time = point.querySelector( 'time' ).textContent;\n\n      trackpoints.push({\n        lon: lon,\n        lat: lat,\n        elevation: elevation,\n        time: time\n      } );\n    };\n\n    return trackpoints;\n  }\n\n  /**\n   * Return average elevation for the whole gpx track.\n   * @return {Number} The average elevation\n   */\n  getAverageElevation(){\n    var elevation = 0,\n        devideBy = 0;\n\n    for( let trkpt = 0; trkpt < this.trkpts.length; trkpt++ ){\n      let point = this.trkpts[ trkpt ];\n\n      if( point.querySelector( 'ele' ) ){\n        elevation += parseFloat( point.querySelector( 'ele' ).textContent );\n        devideBy++;\n      }\n    }\n\n    return elevation / devideBy;\n  }\n\n  /**\n   * @typedef Duration\n   * @type Object\n   * @property {date} start The start time of the run as a Date object\n   * @property {date} end The end time of the run as a Date object\n   * @property {number} totalMS The duration of the run in miliseconds\n   * @property {string} total The duration of the run in human readable form\n   */\n\n  /**\n   * Returns the duration of the run.\n   * @return {Duration} The duration information of the run.\n   */\n  duration(){\n    let start = new Date( this.trackpoints[ 0 ].time ),\n      end = new Date( this.trackpoints[ this.trackpoints.length - 1 ].time ),\n      timeDiff = Math.abs( end.getTime() - start.getTime() ),\n      total = this.millisecondsToTime( timeDiff );\n\n    return {\n      start: start,\n      end: end,\n      totalMS: timeDiff,\n      total: total\n    };\n  }\n\n  /**\n   * Returns formatted time for milliseconds.\n   * @param {string} duration Duration in milliseconds\n   * @return {string} Readable time\n   */\n  millisecondsToTime( duration ){\n    let seconds = parseInt( ( duration / 1000 ) % 60, 10 ),\n      minutes = parseInt( ( duration / ( 1000 * 60 ) ) % 60, 10 ),\n      hours = parseInt( ( duration / ( 1000 * 60 * 60 ) ) % 24, 10 ),\n      days = parseInt( duration / ( 1000 * 60 * 60 * 24 ), 10 ),\n      hoursDays = parseInt( days * 24, 10 );\n\n    hours += hoursDays;\n    hours = ( hours < 10 ) ? '0' + hours : hours;\n    minutes = ( minutes < 10 ) ? '0' + minutes : minutes;\n    seconds = ( seconds < 10 ) ? '0' + seconds : seconds;\n    return ( hours === '00' ) ? minutes + ':' + seconds : hours + ':' + minutes + ':' + seconds;\n  }\n\n  /**\n   * @typedef Pace\n   * @type Object\n   * @property {number} minutes The minutes part of the pace time.\n   * @property {number} seconds The seconds part of the pace time.\n   */\n\n  /**\n   * Returns pace of the run.\n   * @param {number} duration Duration in milliseconds.\n   * @param {number} distance Distance in kilometers.\n   * @return {Pace} The Pace\n   */\n  pace( duration = this.duration().totalMS, distance = this.distance() ){\n    let minutes = new Date( duration / distance ).getUTCMinutes(),\n      seconds = new Date( duration / distance ).getUTCSeconds();\n\n    return {\n      minutes: ( minutes < 10 ) ? '0' + minutes : minutes,\n      seconds: ( seconds < 10 ) ? '0' + seconds : seconds\n    };\n  }\n\n  /**\n   * @typedef Elevation\n   * @type Object\n   * @property {object} elevation The minutes part of the pace time.\n   * @property {number} max The max elevation of the route.\n   * @property {number} min The min elevation of the route.\n   * @property {number} gain Elevation gained during run.\n   * @property {number} loss Elevation lost during run.\n   */\n\n  /**\n   * Returns elevation info of the run\n   * @return {Elevation} The Elevation information object\n   */\n  elevation(){\n    let eleForMinMax = [],\n      richElevation = [],\n      gain = 0, loss = 0,\n      startTime = new Date( this.trackpoints[ 0 ].time ).getTime(),\n      dist = 0;\n\n    for( let i = 0; i < this.trackpoints.length - 1; i++ ){\n      let diff = this.trackpoints[ i + 1 ].elevation - this.trackpoints[ i ].elevation,\n        time = new Date( this.trackpoints[ i + 1 ].time ).getTime(),\n        timeDiff = Math.abs( time - startTime );\n\n      dist += this.calcDistanceBetweenPoints( this.trackpoints[ i ], this.trackpoints[ i + 1 ] );\n\n      if( diff < 0 ){\n        loss += diff;\n      }\n\n      if( diff > 0 ){\n        gain += diff;\n      }\n\n      eleForMinMax.push( this.trackpoints[ i ].elevation );\n      richElevation.push( { elevation: this.trackpoints[ i ].elevation, time: this.millisecondsToTime( timeDiff ), dist: dist } );\n    }\n\n    return {\n      elevation: richElevation,\n      max: Math.max.apply( null, eleForMinMax ),\n      min: Math.min.apply( null, eleForMinMax ),\n      loss: loss,\n      gain: gain\n    };\n  }\n\n  /**\n   * Returns distance of the run\n   * @return {number} distance in kilometers.\n   */\n  distance(){\n    let distanceInKm = 0;\n\n    for( let i = 0; i < this.trackpoints.length - 1; i++ ){\n      distanceInKm += this.calcDistanceBetweenPoints( this.trackpoints[ i ], this.trackpoints[ i + 1 ] );\n    }\n\n    return distanceInKm;\n  }\n\n  /**\n   * Returns distance betwene points\n   * @param {TrackPoint} wp1 Object with trackpoint info\n   * @param {TrackPoint} wp2 Object with trackpoint info\n   * @return {number} distance Distance between the points.\n   */\n  calcDistanceBetweenPoints( wp1, wp2 ){\n    let point1 = {\n        lat: wp1.lat * ( Math.PI / 180 ),\n        lon: wp1.lon * ( Math.PI / 180 ),\n        alt: wp1.elevation / 1000\n      },\n      point2 = {\n        lat: wp2.lat * ( Math.PI / 180 ),\n        lon: wp2.lon * ( Math.PI / 180 ),\n        alt: wp2.elevation / 1000\n      },\n      dp = 2 * Math.asin( Math.sqrt( Math.pow( Math.sin( ( point1.lat - point2.lat ) / 2 ), 2 ) + Math.cos( point1.lat ) * Math.cos( point2.lat ) * Math.pow( Math.sin( ( point1.lon - point2.lon ) / 2 ), 2 ) ) ),\n      d = dp * 6366,\n      h = Math.sqrt( Math.pow( d, 2 ) + Math.pow( point2.alt - point1.alt, 2 ) );\n\n    return h;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/"],"sourceRoot":""}